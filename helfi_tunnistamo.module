<?php

/**
 * @file
 * Contains alterations for the Hel.fi tunnistamo module.
 */

declare(strict_types = 1);

use Drupal\Component\Uuid\Uuid;
use Drupal\Core\Form\FormStateInterface;
use Drupal\helfi_tunnistamo\Plugin\OpenIDConnectClient\Tunnistamo;
use Drupal\openid_connect\Entity\OpenIDConnectClientEntity;
use Drupal\user\UserInterface;

/**
 * Implements hook_openid_connect_pre_authorize().
 */
function helfi_tunnistamo_openid_connect_pre_authorize(UserInterface|bool $account, array $context) : bool {
  $plugin = OpenIDConnectClientEntity::load($context['plugin_id'])?->getPlugin();

  if (!$plugin instanceof Tunnistamo) {
    return TRUE;
  }

  // Only allow users with placeholder emails to use edu client. The edu client
  // is a fallback mechanism to work around HP-2147. Non edu.hel.fi users
  // must use other authentication methods.
  // @todo remove separate clients when issues with edu.hel.fi users are fixed.
  if ($plugin->isEduClient()) {
    return $context['userinfo']['email_is_placeholder'] ?? FALSE;
  }

  return TRUE;
}

/**
 * Implements hook_openid_connect_post_authorize().
 */
function helfi_tunnistamo_openid_connect_post_authorize(UserInterface $account, array $context) : void {
  $plugin = OpenIDConnectClientEntity::load($context['plugin_id'])?->getPlugin();

  if (!$plugin instanceof Tunnistamo) {
    return;
  }
  $plugin->mapRoles($account, $context);
  $plugin->setUserPreferredAdminLanguage($account);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function helfi_tunnistamo_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) : void {
  $mail = $form['account']['mail']['#default_value'] ?? NULL;

  if (!$account = user_load_by_mail($mail)) {
    return;
  }

  if (!\Drupal::service('externalauth.authmap')->getAll($account->id())) {
    return;
  }
  // Prevent users from changing the email if they have used openid_connect
  // to log in.
  $form['account']['mail']['#type'] = 'item';
  $form['account']['mail']['#markup'] = $account->getEmail();
}

/**
 * Generates an email address for the given userinfo array.
 *
 * @param array $userinfo
 *   The userinfo.
 *
 * @return string
 *   The autogenerated email.
 */
function helfi_tunnistamo_create_email(array $userinfo) : string {
  return $userinfo['sub'] . '+placeholder@hel.fi';
}

/**
 * Implements hook_openid_connect_userinfo_alter().
 */
function helfi_tunnistamo_openid_connect_userinfo_alter(
  array &$userinfo,
  array $context
) : void {
  $plugin = OpenIDConnectClientEntity::load($context['plugin_id'])?->getPlugin();

  if (!$plugin instanceof Tunnistamo) {
    return;
  }

  if (empty($userinfo['email'])) {
    // If the user email is missing, replace it with a made-up address (issue
    // with @edu.hel.fi users).
    $userinfo['email'] = helfi_tunnistamo_create_email($userinfo);
    $userinfo['email_is_placeholder'] = TRUE;
  }

  // Unset preferred_username if it is a UUID so that new users get their
  // name from `name` field instead.
  if (!empty($userinfo['preferred_username']) && Uuid::isValid($userinfo['preferred_username'])) {
    unset($userinfo['preferred_username']);
  }

}
